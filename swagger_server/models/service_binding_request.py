# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.context import Context
from swagger_server.models.service_binding_resource_object import ServiceBindingResourceObject
from swagger_server import util


class ServiceBindingRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, context: Context=None, service_id: str=None, plan_id: str=None, app_guid: str=None, bind_resource: ServiceBindingResourceObject=None, parameters: object=None, predecessor_binding_id: str=None):  # noqa: E501
        """ServiceBindingRequest - a model defined in Swagger

        :param context: The context of this ServiceBindingRequest.  # noqa: E501
        :type context: Context
        :param service_id: The service_id of this ServiceBindingRequest.  # noqa: E501
        :type service_id: str
        :param plan_id: The plan_id of this ServiceBindingRequest.  # noqa: E501
        :type plan_id: str
        :param app_guid: The app_guid of this ServiceBindingRequest.  # noqa: E501
        :type app_guid: str
        :param bind_resource: The bind_resource of this ServiceBindingRequest.  # noqa: E501
        :type bind_resource: ServiceBindingResourceObject
        :param parameters: The parameters of this ServiceBindingRequest.  # noqa: E501
        :type parameters: object
        :param predecessor_binding_id: The predecessor_binding_id of this ServiceBindingRequest.  # noqa: E501
        :type predecessor_binding_id: str
        """
        self.swagger_types = {
            'context': Context,
            'service_id': str,
            'plan_id': str,
            'app_guid': str,
            'bind_resource': ServiceBindingResourceObject,
            'parameters': object,
            'predecessor_binding_id': str
        }

        self.attribute_map = {
            'context': 'context',
            'service_id': 'service_id',
            'plan_id': 'plan_id',
            'app_guid': 'app_guid',
            'bind_resource': 'bind_resource',
            'parameters': 'parameters',
            'predecessor_binding_id': 'predecessor_binding_id'
        }

        self._context = context
        self._service_id = service_id
        self._plan_id = plan_id
        self._app_guid = app_guid
        self._bind_resource = bind_resource
        self._parameters = parameters
        self._predecessor_binding_id = predecessor_binding_id

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceBindingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceBindingRequest of this ServiceBindingRequest.  # noqa: E501
        :rtype: ServiceBindingRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> Context:
        """Gets the context of this ServiceBindingRequest.


        :return: The context of this ServiceBindingRequest.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context: Context):
        """Sets the context of this ServiceBindingRequest.


        :param context: The context of this ServiceBindingRequest.
        :type context: Context
        """

        self._context = context

    @property
    def service_id(self) -> str:
        """Gets the service_id of this ServiceBindingRequest.


        :return: The service_id of this ServiceBindingRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """Sets the service_id of this ServiceBindingRequest.


        :param service_id: The service_id of this ServiceBindingRequest.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def plan_id(self) -> str:
        """Gets the plan_id of this ServiceBindingRequest.


        :return: The plan_id of this ServiceBindingRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """Sets the plan_id of this ServiceBindingRequest.


        :param plan_id: The plan_id of this ServiceBindingRequest.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def app_guid(self) -> str:
        """Gets the app_guid of this ServiceBindingRequest.


        :return: The app_guid of this ServiceBindingRequest.
        :rtype: str
        """
        return self._app_guid

    @app_guid.setter
    def app_guid(self, app_guid: str):
        """Sets the app_guid of this ServiceBindingRequest.


        :param app_guid: The app_guid of this ServiceBindingRequest.
        :type app_guid: str
        """

        self._app_guid = app_guid

    @property
    def bind_resource(self) -> ServiceBindingResourceObject:
        """Gets the bind_resource of this ServiceBindingRequest.


        :return: The bind_resource of this ServiceBindingRequest.
        :rtype: ServiceBindingResourceObject
        """
        return self._bind_resource

    @bind_resource.setter
    def bind_resource(self, bind_resource: ServiceBindingResourceObject):
        """Sets the bind_resource of this ServiceBindingRequest.


        :param bind_resource: The bind_resource of this ServiceBindingRequest.
        :type bind_resource: ServiceBindingResourceObject
        """

        self._bind_resource = bind_resource

    @property
    def parameters(self) -> object:
        """Gets the parameters of this ServiceBindingRequest.


        :return: The parameters of this ServiceBindingRequest.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """Sets the parameters of this ServiceBindingRequest.


        :param parameters: The parameters of this ServiceBindingRequest.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def predecessor_binding_id(self) -> str:
        """Gets the predecessor_binding_id of this ServiceBindingRequest.


        :return: The predecessor_binding_id of this ServiceBindingRequest.
        :rtype: str
        """
        return self._predecessor_binding_id

    @predecessor_binding_id.setter
    def predecessor_binding_id(self, predecessor_binding_id: str):
        """Sets the predecessor_binding_id of this ServiceBindingRequest.


        :param predecessor_binding_id: The predecessor_binding_id of this ServiceBindingRequest.
        :type predecessor_binding_id: str
        """

        self._predecessor_binding_id = predecessor_binding_id
