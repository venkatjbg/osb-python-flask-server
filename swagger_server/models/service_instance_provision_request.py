# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.context import Context
from swagger_server.models.maintenance_info import MaintenanceInfo
from swagger_server import util


class ServiceInstanceProvisionRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, service_id: str=None, plan_id: str=None, context: Context=None, parameters: object=None, maintenance_info: MaintenanceInfo=None):  # noqa: E501
        """ServiceInstanceProvisionRequest - a model defined in Swagger

        :param service_id: The service_id of this ServiceInstanceProvisionRequest.  # noqa: E501
        :type service_id: str
        :param plan_id: The plan_id of this ServiceInstanceProvisionRequest.  # noqa: E501
        :type plan_id: str
        :param context: The context of this ServiceInstanceProvisionRequest.  # noqa: E501
        :type context: Context
        :param parameters: The parameters of this ServiceInstanceProvisionRequest.  # noqa: E501
        :type parameters: object
        :param maintenance_info: The maintenance_info of this ServiceInstanceProvisionRequest.  # noqa: E501
        :type maintenance_info: MaintenanceInfo
        """
        self.swagger_types = {
            'service_id': str,
            'plan_id': str,
            'context': Context,
            'parameters': object,
            'maintenance_info': MaintenanceInfo
        }

        self.attribute_map = {
            'service_id': 'service_id',
            'plan_id': 'plan_id',
            'context': 'context',
            'parameters': 'parameters',
            'maintenance_info': 'maintenance_info'
        }

        self._service_id = service_id
        self._plan_id = plan_id
        self._context = context
        self._parameters = parameters
        self._maintenance_info = maintenance_info

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceInstanceProvisionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceInstanceProvisionRequest of this ServiceInstanceProvisionRequest.  # noqa: E501
        :rtype: ServiceInstanceProvisionRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_id(self) -> str:
        """Gets the service_id of this ServiceInstanceProvisionRequest.


        :return: The service_id of this ServiceInstanceProvisionRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """Sets the service_id of this ServiceInstanceProvisionRequest.


        :param service_id: The service_id of this ServiceInstanceProvisionRequest.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def plan_id(self) -> str:
        """Gets the plan_id of this ServiceInstanceProvisionRequest.


        :return: The plan_id of this ServiceInstanceProvisionRequest.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: str):
        """Sets the plan_id of this ServiceInstanceProvisionRequest.


        :param plan_id: The plan_id of this ServiceInstanceProvisionRequest.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def context(self) -> Context:
        """Gets the context of this ServiceInstanceProvisionRequest.


        :return: The context of this ServiceInstanceProvisionRequest.
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context: Context):
        """Sets the context of this ServiceInstanceProvisionRequest.


        :param context: The context of this ServiceInstanceProvisionRequest.
        :type context: Context
        """

        self._context = context

    @property
    def parameters(self) -> object:
        """Gets the parameters of this ServiceInstanceProvisionRequest.


        :return: The parameters of this ServiceInstanceProvisionRequest.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: object):
        """Sets the parameters of this ServiceInstanceProvisionRequest.


        :param parameters: The parameters of this ServiceInstanceProvisionRequest.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def maintenance_info(self) -> MaintenanceInfo:
        """Gets the maintenance_info of this ServiceInstanceProvisionRequest.


        :return: The maintenance_info of this ServiceInstanceProvisionRequest.
        :rtype: MaintenanceInfo
        """
        return self._maintenance_info

    @maintenance_info.setter
    def maintenance_info(self, maintenance_info: MaintenanceInfo):
        """Sets the maintenance_info of this ServiceInstanceProvisionRequest.


        :param maintenance_info: The maintenance_info of this ServiceInstanceProvisionRequest.
        :type maintenance_info: MaintenanceInfo
        """

        self._maintenance_info = maintenance_info
