# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dashboard_client import DashboardClient
from swagger_server.models.metadata import Metadata
from swagger_server.models.plan import Plan
from swagger_server import util


class Service(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, id: str=None, description: str=None, tags: List[str]=None, requires: List[str]=None, bindable: bool=None, instances_retrievable: bool=None, bindings_retrievable: bool=None, allow_context_updates: bool=None, metadata: Metadata=None, dashboard_client: DashboardClient=None, binding_rotatable: bool=None, plan_updateable: bool=None, plans: List[Plan]=None):  # noqa: E501
        """Service - a model defined in Swagger

        :param name: The name of this Service.  # noqa: E501
        :type name: str
        :param id: The id of this Service.  # noqa: E501
        :type id: str
        :param description: The description of this Service.  # noqa: E501
        :type description: str
        :param tags: The tags of this Service.  # noqa: E501
        :type tags: List[str]
        :param requires: The requires of this Service.  # noqa: E501
        :type requires: List[str]
        :param bindable: The bindable of this Service.  # noqa: E501
        :type bindable: bool
        :param instances_retrievable: The instances_retrievable of this Service.  # noqa: E501
        :type instances_retrievable: bool
        :param bindings_retrievable: The bindings_retrievable of this Service.  # noqa: E501
        :type bindings_retrievable: bool
        :param allow_context_updates: The allow_context_updates of this Service.  # noqa: E501
        :type allow_context_updates: bool
        :param metadata: The metadata of this Service.  # noqa: E501
        :type metadata: Metadata
        :param dashboard_client: The dashboard_client of this Service.  # noqa: E501
        :type dashboard_client: DashboardClient
        :param binding_rotatable: The binding_rotatable of this Service.  # noqa: E501
        :type binding_rotatable: bool
        :param plan_updateable: The plan_updateable of this Service.  # noqa: E501
        :type plan_updateable: bool
        :param plans: The plans of this Service.  # noqa: E501
        :type plans: List[Plan]
        """
        self.swagger_types = {
            'name': str,
            'id': str,
            'description': str,
            'tags': List[str],
            'requires': List[str],
            'bindable': bool,
            'instances_retrievable': bool,
            'bindings_retrievable': bool,
            'allow_context_updates': bool,
            'metadata': Metadata,
            'dashboard_client': DashboardClient,
            'binding_rotatable': bool,
            'plan_updateable': bool,
            'plans': List[Plan]
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'description': 'description',
            'tags': 'tags',
            'requires': 'requires',
            'bindable': 'bindable',
            'instances_retrievable': 'instances_retrievable',
            'bindings_retrievable': 'bindings_retrievable',
            'allow_context_updates': 'allow_context_updates',
            'metadata': 'metadata',
            'dashboard_client': 'dashboard_client',
            'binding_rotatable': 'binding_rotatable',
            'plan_updateable': 'plan_updateable',
            'plans': 'plans'
        }

        self._name = name
        self._id = id
        self._description = description
        self._tags = tags
        self._requires = requires
        self._bindable = bindable
        self._instances_retrievable = instances_retrievable
        self._bindings_retrievable = bindings_retrievable
        self._allow_context_updates = allow_context_updates
        self._metadata = metadata
        self._dashboard_client = dashboard_client
        self._binding_rotatable = binding_rotatable
        self._plan_updateable = plan_updateable
        self._plans = plans

    @classmethod
    def from_dict(cls, dikt) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Service of this Service.  # noqa: E501
        :rtype: Service
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Service.


        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Service.


        :param name: The name of this Service.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self) -> str:
        """Gets the id of this Service.


        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Service.


        :param id: The id of this Service.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self) -> str:
        """Gets the description of this Service.


        :return: The description of this Service.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Service.


        :param description: The description of this Service.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Service.


        :return: The tags of this Service.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Service.


        :param tags: The tags of this Service.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def requires(self) -> List[str]:
        """Gets the requires of this Service.


        :return: The requires of this Service.
        :rtype: List[str]
        """
        return self._requires

    @requires.setter
    def requires(self, requires: List[str]):
        """Sets the requires of this Service.


        :param requires: The requires of this Service.
        :type requires: List[str]
        """
        allowed_values = ["syslog_drain", "route_forwarding", "volume_mount"]  # noqa: E501
        if not set(requires).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `requires` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(requires) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._requires = requires

    @property
    def bindable(self) -> bool:
        """Gets the bindable of this Service.


        :return: The bindable of this Service.
        :rtype: bool
        """
        return self._bindable

    @bindable.setter
    def bindable(self, bindable: bool):
        """Sets the bindable of this Service.


        :param bindable: The bindable of this Service.
        :type bindable: bool
        """
        if bindable is None:
            raise ValueError("Invalid value for `bindable`, must not be `None`")  # noqa: E501

        self._bindable = bindable

    @property
    def instances_retrievable(self) -> bool:
        """Gets the instances_retrievable of this Service.


        :return: The instances_retrievable of this Service.
        :rtype: bool
        """
        return self._instances_retrievable

    @instances_retrievable.setter
    def instances_retrievable(self, instances_retrievable: bool):
        """Sets the instances_retrievable of this Service.


        :param instances_retrievable: The instances_retrievable of this Service.
        :type instances_retrievable: bool
        """

        self._instances_retrievable = instances_retrievable

    @property
    def bindings_retrievable(self) -> bool:
        """Gets the bindings_retrievable of this Service.


        :return: The bindings_retrievable of this Service.
        :rtype: bool
        """
        return self._bindings_retrievable

    @bindings_retrievable.setter
    def bindings_retrievable(self, bindings_retrievable: bool):
        """Sets the bindings_retrievable of this Service.


        :param bindings_retrievable: The bindings_retrievable of this Service.
        :type bindings_retrievable: bool
        """

        self._bindings_retrievable = bindings_retrievable

    @property
    def allow_context_updates(self) -> bool:
        """Gets the allow_context_updates of this Service.


        :return: The allow_context_updates of this Service.
        :rtype: bool
        """
        return self._allow_context_updates

    @allow_context_updates.setter
    def allow_context_updates(self, allow_context_updates: bool):
        """Sets the allow_context_updates of this Service.


        :param allow_context_updates: The allow_context_updates of this Service.
        :type allow_context_updates: bool
        """

        self._allow_context_updates = allow_context_updates

    @property
    def metadata(self) -> Metadata:
        """Gets the metadata of this Service.


        :return: The metadata of this Service.
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Metadata):
        """Sets the metadata of this Service.


        :param metadata: The metadata of this Service.
        :type metadata: Metadata
        """

        self._metadata = metadata

    @property
    def dashboard_client(self) -> DashboardClient:
        """Gets the dashboard_client of this Service.


        :return: The dashboard_client of this Service.
        :rtype: DashboardClient
        """
        return self._dashboard_client

    @dashboard_client.setter
    def dashboard_client(self, dashboard_client: DashboardClient):
        """Sets the dashboard_client of this Service.


        :param dashboard_client: The dashboard_client of this Service.
        :type dashboard_client: DashboardClient
        """

        self._dashboard_client = dashboard_client

    @property
    def binding_rotatable(self) -> bool:
        """Gets the binding_rotatable of this Service.


        :return: The binding_rotatable of this Service.
        :rtype: bool
        """
        return self._binding_rotatable

    @binding_rotatable.setter
    def binding_rotatable(self, binding_rotatable: bool):
        """Sets the binding_rotatable of this Service.


        :param binding_rotatable: The binding_rotatable of this Service.
        :type binding_rotatable: bool
        """

        self._binding_rotatable = binding_rotatable

    @property
    def plan_updateable(self) -> bool:
        """Gets the plan_updateable of this Service.


        :return: The plan_updateable of this Service.
        :rtype: bool
        """
        return self._plan_updateable

    @plan_updateable.setter
    def plan_updateable(self, plan_updateable: bool):
        """Sets the plan_updateable of this Service.


        :param plan_updateable: The plan_updateable of this Service.
        :type plan_updateable: bool
        """

        self._plan_updateable = plan_updateable

    @property
    def plans(self) -> List[Plan]:
        """Gets the plans of this Service.


        :return: The plans of this Service.
        :rtype: List[Plan]
        """
        return self._plans

    @plans.setter
    def plans(self, plans: List[Plan]):
        """Sets the plans of this Service.


        :param plans: The plans of this Service.
        :type plans: List[Plan]
        """
        if plans is None:
            raise ValueError("Invalid value for `plans`, must not be `None`")  # noqa: E501

        self._plans = plans
