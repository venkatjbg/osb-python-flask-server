# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.service_binding_volume_mount_device import ServiceBindingVolumeMountDevice
from swagger_server import util


class ServiceBindingVolumeMount(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, driver: str=None, container_dir: str=None, mode: str=None, device_type: str=None, device: ServiceBindingVolumeMountDevice=None):  # noqa: E501
        """ServiceBindingVolumeMount - a model defined in Swagger

        :param driver: The driver of this ServiceBindingVolumeMount.  # noqa: E501
        :type driver: str
        :param container_dir: The container_dir of this ServiceBindingVolumeMount.  # noqa: E501
        :type container_dir: str
        :param mode: The mode of this ServiceBindingVolumeMount.  # noqa: E501
        :type mode: str
        :param device_type: The device_type of this ServiceBindingVolumeMount.  # noqa: E501
        :type device_type: str
        :param device: The device of this ServiceBindingVolumeMount.  # noqa: E501
        :type device: ServiceBindingVolumeMountDevice
        """
        self.swagger_types = {
            'driver': str,
            'container_dir': str,
            'mode': str,
            'device_type': str,
            'device': ServiceBindingVolumeMountDevice
        }

        self.attribute_map = {
            'driver': 'driver',
            'container_dir': 'container_dir',
            'mode': 'mode',
            'device_type': 'device_type',
            'device': 'device'
        }

        self._driver = driver
        self._container_dir = container_dir
        self._mode = mode
        self._device_type = device_type
        self._device = device

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceBindingVolumeMount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceBindingVolumeMount of this ServiceBindingVolumeMount.  # noqa: E501
        :rtype: ServiceBindingVolumeMount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver(self) -> str:
        """Gets the driver of this ServiceBindingVolumeMount.


        :return: The driver of this ServiceBindingVolumeMount.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this ServiceBindingVolumeMount.


        :param driver: The driver of this ServiceBindingVolumeMount.
        :type driver: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def container_dir(self) -> str:
        """Gets the container_dir of this ServiceBindingVolumeMount.


        :return: The container_dir of this ServiceBindingVolumeMount.
        :rtype: str
        """
        return self._container_dir

    @container_dir.setter
    def container_dir(self, container_dir: str):
        """Sets the container_dir of this ServiceBindingVolumeMount.


        :param container_dir: The container_dir of this ServiceBindingVolumeMount.
        :type container_dir: str
        """
        if container_dir is None:
            raise ValueError("Invalid value for `container_dir`, must not be `None`")  # noqa: E501

        self._container_dir = container_dir

    @property
    def mode(self) -> str:
        """Gets the mode of this ServiceBindingVolumeMount.


        :return: The mode of this ServiceBindingVolumeMount.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this ServiceBindingVolumeMount.


        :param mode: The mode of this ServiceBindingVolumeMount.
        :type mode: str
        """
        allowed_values = ["r", "rw"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def device_type(self) -> str:
        """Gets the device_type of this ServiceBindingVolumeMount.


        :return: The device_type of this ServiceBindingVolumeMount.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type: str):
        """Sets the device_type of this ServiceBindingVolumeMount.


        :param device_type: The device_type of this ServiceBindingVolumeMount.
        :type device_type: str
        """
        allowed_values = ["shared"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def device(self) -> ServiceBindingVolumeMountDevice:
        """Gets the device of this ServiceBindingVolumeMount.


        :return: The device of this ServiceBindingVolumeMount.
        :rtype: ServiceBindingVolumeMountDevice
        """
        return self._device

    @device.setter
    def device(self, device: ServiceBindingVolumeMountDevice):
        """Sets the device of this ServiceBindingVolumeMount.


        :param device: The device of this ServiceBindingVolumeMount.
        :type device: ServiceBindingVolumeMountDevice
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device
