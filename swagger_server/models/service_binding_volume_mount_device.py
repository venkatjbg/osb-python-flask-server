# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ServiceBindingVolumeMountDevice(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, volume_id: str=None, mount_config: object=None):  # noqa: E501
        """ServiceBindingVolumeMountDevice - a model defined in Swagger

        :param volume_id: The volume_id of this ServiceBindingVolumeMountDevice.  # noqa: E501
        :type volume_id: str
        :param mount_config: The mount_config of this ServiceBindingVolumeMountDevice.  # noqa: E501
        :type mount_config: object
        """
        self.swagger_types = {
            'volume_id': str,
            'mount_config': object
        }

        self.attribute_map = {
            'volume_id': 'volume_id',
            'mount_config': 'mount_config'
        }

        self._volume_id = volume_id
        self._mount_config = mount_config

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceBindingVolumeMountDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceBindingVolumeMountDevice of this ServiceBindingVolumeMountDevice.  # noqa: E501
        :rtype: ServiceBindingVolumeMountDevice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volume_id(self) -> str:
        """Gets the volume_id of this ServiceBindingVolumeMountDevice.


        :return: The volume_id of this ServiceBindingVolumeMountDevice.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id: str):
        """Sets the volume_id of this ServiceBindingVolumeMountDevice.


        :param volume_id: The volume_id of this ServiceBindingVolumeMountDevice.
        :type volume_id: str
        """
        if volume_id is None:
            raise ValueError("Invalid value for `volume_id`, must not be `None`")  # noqa: E501

        self._volume_id = volume_id

    @property
    def mount_config(self) -> object:
        """Gets the mount_config of this ServiceBindingVolumeMountDevice.


        :return: The mount_config of this ServiceBindingVolumeMountDevice.
        :rtype: object
        """
        return self._mount_config

    @mount_config.setter
    def mount_config(self, mount_config: object):
        """Sets the mount_config of this ServiceBindingVolumeMountDevice.


        :param mount_config: The mount_config of this ServiceBindingVolumeMountDevice.
        :type mount_config: object
        """

        self._mount_config = mount_config
