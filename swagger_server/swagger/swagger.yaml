---
swagger: "2.0"
info:
  description: "The Open Service Broker API defines an HTTP(S) interface between Platforms\
    \ and Service Brokers."
  version: "master - might contain changes that are not yet released"
  title: "Open Service Broker API"
  contact:
    name: "Open Service Broker API"
    url: "https://www.openservicebrokerapi.org/"
    email: "open-service-broker-api@googlegroups.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:3000"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basicAuth: []
paths:
  /v2/catalog:
    get:
      tags:
      - "Catalog"
      summary: "get the catalog of services that the service broker offers"
      operationId: "catalog_get"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      responses:
        "200":
          description: "catalog response"
          schema:
            $ref: "#/definitions/Catalog"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.catalog_controller"
  /v2/service_instances/**:
    get:
      tags:
      - "ServiceInstances"
      summary: "gets a service instance"
      operationId: "service_instance_get"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - name: "service_id"
        in: "query"
        description: "id of the service associated with the instance"
        required: false
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "id of the plan associated with the instance"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServiceInstanceResource"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_instances_controller"
    put:
      tags:
      - "ServiceInstances"
      summary: "provision a service instance"
      operationId: "service_instance_provision"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "parameters for the requested service instance provision"
        required: true
        schema:
          $ref: "#/definitions/ServiceInstanceProvisionRequest"
      - name: "accepts_incomplete"
        in: "query"
        description: "asynchronous operations supported"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServiceInstanceProvisionResponse"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ServiceInstanceProvisionResponse"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServiceInstanceAsyncOperation"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_instances_controller"
    delete:
      tags:
      - "ServiceInstances"
      summary: "deprovision a service instance"
      operationId: "service_instance_deprovision"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - name: "accepts_incomplete"
        in: "query"
        description: "asynchronous operations supported"
        required: false
        type: "boolean"
      - name: "service_id"
        in: "query"
        description: "id of the service associated with the instance being deleted"
        required: true
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "id of the plan associated with the instance being deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/AsyncOperation"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Gone"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_instances_controller"
    patch:
      tags:
      - "ServiceInstances"
      summary: "update a service instance"
      operationId: "service_instance_update"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - in: "body"
        name: "body"
        description: "parameters for the requested service instance update"
        required: true
        schema:
          $ref: "#/definitions/ServiceInstanceUpdateRequest"
      - name: "accepts_incomplete"
        in: "query"
        description: "asynchronous operations supported"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServiceInstanceAsyncOperation"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_instances_controller"
  /v2/service_instances/**/last_operation:
    get:
      tags:
      - "ServiceInstances"
      summary: "last requested operation state for service instance"
      operationId: "service_instance_last_operation_get"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - name: "service_id"
        in: "query"
        description: "id of the service associated with the instance"
        required: false
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "id of the plan associated with the instance"
        required: false
        type: "string"
      - name: "operation"
        in: "query"
        description: "a provided identifier for the operation"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK"
          headers:
            RetryAfter:
              type: "string"
              description: "Indicates when to retry the request"
          schema:
            $ref: "#/definitions/LastOperationResource"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Gone"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_instances_controller"
  /v2/service_instances/**/service_bindings/{binding_id}/last_operation:
    get:
      tags:
      - "ServiceBindings"
      summary: "last requested operation state for service binding"
      operationId: "service_binding_last_operation_get"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - name: "binding_id"
        in: "path"
        description: "binding id of binding to create"
        required: true
        type: "string"
      - name: "service_id"
        in: "query"
        description: "id of the service associated with the instance"
        required: false
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "id of the plan associated with the instance"
        required: false
        type: "string"
      - name: "operation"
        in: "query"
        description: "a provided identifier for the operation"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK"
          headers:
            RetryAfter:
              type: "string"
              description: "Indicates when to retry the request"
          schema:
            $ref: "#/definitions/LastOperationResource"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Gone"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_bindings_controller"
  /v2/service_instances/**/service_bindings/{binding_id}:
    get:
      tags:
      - "ServiceBindings"
      summary: "gets a service binding"
      operationId: "service_binding_get"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - name: "binding_id"
        in: "path"
        description: "binding id of binding to create"
        required: true
        type: "string"
      - name: "service_id"
        in: "query"
        description: "id of the service associated with the instance"
        required: false
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "id of the plan associated with the instance"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServiceBindingResource"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_bindings_controller"
    put:
      tags:
      - "ServiceBindings"
      summary: "generation of a service binding"
      operationId: "service_binding_binding"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - name: "binding_id"
        in: "path"
        description: "binding id of binding to create"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "parameters for the requested service binding"
        required: true
        schema:
          $ref: "#/definitions/ServiceBindingRequest"
      - name: "accepts_incomplete"
        in: "query"
        description: "asynchronous operations supported"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServiceBindingResponse"
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/ServiceBindingResponse"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/AsyncOperation"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Gone"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_bindings_controller"
    delete:
      tags:
      - "ServiceBindings"
      summary: "deprovision of a service binding"
      operationId: "service_binding_unbinding"
      parameters:
      - name: "X_Broker_API_Version"
        in: "header"
        description: "version number of the Service Broker API that the Platform will\
          \ use"
        required: true
        type: "string"
      - name: "X_Broker_API_Originating_Identity"
        in: "header"
        description: "identity of the user that initiated the request from the Platform"
        required: false
        type: "string"
      - name: "X_Broker_API_Request_Identity"
        in: "header"
        description: "idenity of the request from the Platform"
        required: false
        type: "string"
      - name: "binding_id"
        in: "path"
        description: "binding id of binding to create"
        required: true
        type: "string"
      - name: "service_id"
        in: "query"
        description: "id of the service associated with the instance being deleted"
        required: true
        type: "string"
      - name: "plan_id"
        in: "query"
        description: "id of the plan associated with the instance being deleted"
        required: true
        type: "string"
      - name: "accepts_incomplete"
        in: "query"
        description: "asynchronous operations supported"
        required: false
        type: "boolean"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/AsyncOperation"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "410":
          description: "Gone"
          schema:
            $ref: "#/definitions/Error"
        "412":
          description: "Precondition Failed"
          schema:
            $ref: "#/definitions/Error"
        "422":
          description: "Unprocessable Entity"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.service_bindings_controller"
securityDefinitions:
  basicAuth:
    type: "basic"
    x-basicInfoFunc: "swagger_server.controllers.authorization_controller.check_basicAuth"
definitions:
  Catalog:
    type: "object"
    properties:
      services:
        type: "array"
        items:
          $ref: "#/definitions/Service"
    example:
      services:
      - allow_context_updates: true
        metadata: {}
        instances_retrievable: true
        binding_rotatable: true
        description: "description"
        tags:
        - "tags"
        - "tags"
        bindable: true
        plan_updateable: true
        plans:
        - bindable: true
          plan_updateable: true
          maintenance_info:
            description: "description"
            version: "version"
          schemas:
            service_binding:
              create:
                parameters: {}
            service_instance:
              create:
                parameters: {}
              update:
                parameters: {}
          name: "name"
          binding_rotatable: false
          description: "description"
          id: "id"
          free: true
          maximum_polling_duration: 0
        - bindable: true
          plan_updateable: true
          maintenance_info:
            description: "description"
            version: "version"
          schemas:
            service_binding:
              create:
                parameters: {}
            service_instance:
              create:
                parameters: {}
              update:
                parameters: {}
          name: "name"
          binding_rotatable: false
          description: "description"
          id: "id"
          free: true
          maximum_polling_duration: 0
        name: "name"
        id: "id"
        dashboard_client:
          id: "id"
          secret: "secret"
          redirect_uri: "redirect_uri"
        requires:
        - "syslog_drain"
        - "syslog_drain"
        bindings_retrievable: true
      - allow_context_updates: true
        metadata: {}
        instances_retrievable: true
        binding_rotatable: true
        description: "description"
        tags:
        - "tags"
        - "tags"
        bindable: true
        plan_updateable: true
        plans:
        - bindable: true
          plan_updateable: true
          maintenance_info:
            description: "description"
            version: "version"
          schemas:
            service_binding:
              create:
                parameters: {}
            service_instance:
              create:
                parameters: {}
              update:
                parameters: {}
          name: "name"
          binding_rotatable: false
          description: "description"
          id: "id"
          free: true
          maximum_polling_duration: 0
        - bindable: true
          plan_updateable: true
          maintenance_info:
            description: "description"
            version: "version"
          schemas:
            service_binding:
              create:
                parameters: {}
            service_instance:
              create:
                parameters: {}
              update:
                parameters: {}
          name: "name"
          binding_rotatable: false
          description: "description"
          id: "id"
          free: true
          maximum_polling_duration: 0
        name: "name"
        id: "id"
        dashboard_client:
          id: "id"
          secret: "secret"
          redirect_uri: "redirect_uri"
        requires:
        - "syslog_drain"
        - "syslog_drain"
        bindings_retrievable: true
  Service:
    type: "object"
    required:
    - "bindable"
    - "description"
    - "id"
    - "name"
    - "plans"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      requires:
        type: "array"
        items:
          type: "string"
          enum:
          - "syslog_drain"
          - "route_forwarding"
          - "volume_mount"
      bindable:
        type: "boolean"
      instances_retrievable:
        type: "boolean"
      bindings_retrievable:
        type: "boolean"
      allow_context_updates:
        type: "boolean"
      metadata:
        $ref: "#/definitions/Metadata"
      dashboard_client:
        $ref: "#/definitions/DashboardClient"
      binding_rotatable:
        type: "boolean"
      plan_updateable:
        type: "boolean"
      plans:
        type: "array"
        items:
          $ref: "#/definitions/Plan"
    example:
      allow_context_updates: true
      metadata: {}
      instances_retrievable: true
      binding_rotatable: true
      description: "description"
      tags:
      - "tags"
      - "tags"
      bindable: true
      plan_updateable: true
      plans:
      - bindable: true
        plan_updateable: true
        maintenance_info:
          description: "description"
          version: "version"
        schemas:
          service_binding:
            create:
              parameters: {}
          service_instance:
            create:
              parameters: {}
            update:
              parameters: {}
        name: "name"
        binding_rotatable: false
        description: "description"
        id: "id"
        free: true
        maximum_polling_duration: 0
      - bindable: true
        plan_updateable: true
        maintenance_info:
          description: "description"
          version: "version"
        schemas:
          service_binding:
            create:
              parameters: {}
          service_instance:
            create:
              parameters: {}
            update:
              parameters: {}
        name: "name"
        binding_rotatable: false
        description: "description"
        id: "id"
        free: true
        maximum_polling_duration: 0
      name: "name"
      id: "id"
      dashboard_client:
        id: "id"
        secret: "secret"
        redirect_uri: "redirect_uri"
      requires:
      - "syslog_drain"
      - "syslog_drain"
      bindings_retrievable: true
  DashboardClient:
    type: "object"
    required:
    - "id"
    - "secret"
    properties:
      id:
        type: "string"
      secret:
        type: "string"
      redirect_uri:
        type: "string"
    example:
      id: "id"
      secret: "secret"
      redirect_uri: "redirect_uri"
  Plan:
    type: "object"
    required:
    - "description"
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      metadata:
        $ref: "#/definitions/Metadata"
      free:
        type: "boolean"
        default: true
      bindable:
        type: "boolean"
      plan_updateable:
        type: "boolean"
      schemas:
        $ref: "#/definitions/SchemasObject"
      maximum_polling_duration:
        type: "integer"
      maintenance_info:
        $ref: "#/definitions/MaintenanceInfo"
      binding_rotatable:
        type: "boolean"
        default: false
    example:
      bindable: true
      plan_updateable: true
      maintenance_info:
        description: "description"
        version: "version"
      schemas:
        service_binding:
          create:
            parameters: {}
        service_instance:
          create:
            parameters: {}
          update:
            parameters: {}
      name: "name"
      binding_rotatable: false
      description: "description"
      id: "id"
      free: true
      maximum_polling_duration: 0
  SchemasObject:
    type: "object"
    properties:
      service_instance:
        $ref: "#/definitions/ServiceInstanceSchemaObject"
      service_binding:
        $ref: "#/definitions/ServiceBindingSchemaObject"
    example:
      service_binding:
        create:
          parameters: {}
      service_instance:
        create:
          parameters: {}
        update:
          parameters: {}
  ServiceInstanceSchemaObject:
    type: "object"
    properties:
      create:
        $ref: "#/definitions/SchemaParameters"
      update:
        $ref: "#/definitions/SchemaParameters"
    example:
      create:
        parameters: {}
      update:
        parameters: {}
  ServiceBindingSchemaObject:
    type: "object"
    properties:
      create:
        $ref: "#/definitions/SchemaParameters"
    example:
      create:
        parameters: {}
  SchemaParameters:
    type: "object"
    properties:
      parameters:
        $ref: "#/definitions/JSONSchemaObject"
    example:
      parameters: {}
  JSONSchemaObject:
    type: "object"
  ServiceInstanceResource:
    type: "object"
    properties:
      service_id:
        type: "string"
      plan_id:
        type: "string"
      dashboard_url:
        type: "string"
      parameters:
        type: "object"
        properties: {}
      maintenance_info:
        $ref: "#/definitions/MaintenanceInfo"
      metadata:
        $ref: "#/definitions/ServiceInstanceMetadata"
    example:
      metadata:
        attributes: "{}"
        labels: "{}"
      maintenance_info:
        description: "description"
        version: "version"
      service_id: "service_id"
      dashboard_url: "dashboard_url"
      parameters: "{}"
      plan_id: "plan_id"
  ServiceInstanceProvisionRequest:
    type: "object"
    required:
    - "plan_id"
    - "service_id"
    properties:
      service_id:
        type: "string"
      plan_id:
        type: "string"
      context:
        $ref: "#/definitions/Context"
      parameters:
        type: "object"
        properties: {}
      maintenance_info:
        $ref: "#/definitions/MaintenanceInfo"
    example:
      maintenance_info:
        description: "description"
        version: "version"
      service_id: "service_id"
      context: {}
      parameters: "{}"
      plan_id: "plan_id"
  ServiceInstanceProvisionResponse:
    type: "object"
    properties:
      dashboard_url:
        type: "string"
      metadata:
        $ref: "#/definitions/ServiceInstanceMetadata"
    example:
      metadata:
        attributes: "{}"
        labels: "{}"
      dashboard_url: "dashboard_url"
  ServiceInstanceAsyncOperation:
    type: "object"
    properties:
      dashboard_url:
        type: "string"
      operation:
        type: "string"
      metadata:
        $ref: "#/definitions/ServiceInstanceMetadata"
  ServiceInstanceUpdateRequest:
    type: "object"
    required:
    - "service_id"
    properties:
      context:
        $ref: "#/definitions/Context"
      service_id:
        type: "string"
      plan_id:
        type: "string"
      parameters:
        type: "object"
        properties: {}
      previous_values:
        $ref: "#/definitions/ServiceInstancePreviousValues"
      maintenance_info:
        $ref: "#/definitions/MaintenanceInfo"
    example:
      maintenance_info:
        description: "description"
        version: "version"
      previous_values:
        maintenance_info:
          description: "description"
          version: "version"
        service_id: "service_id"
        plan_id: "plan_id"
      service_id: "service_id"
      context: {}
      parameters: "{}"
      plan_id: "plan_id"
  ServiceInstancePreviousValues:
    type: "object"
    properties:
      service_id:
        type: "string"
        x-deprecated: true
      plan_id:
        type: "string"
      maintenance_info:
        $ref: "#/definitions/MaintenanceInfo"
    example:
      maintenance_info:
        description: "description"
        version: "version"
      service_id: "service_id"
      plan_id: "plan_id"
  AsyncOperation:
    type: "object"
    properties:
      operation:
        type: "string"
  LastOperationResource:
    type: "object"
    required:
    - "state"
    properties:
      state:
        type: "string"
        enum:
        - "in progress"
        - "succeeded"
        - "failed"
      description:
        type: "string"
      instance_usable:
        type: "boolean"
      update_repeatable:
        type: "boolean"
    example:
      instance_usable: true
      update_repeatable: true
      description: "description"
      state: "in progress"
  ServiceBindingResource:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/ServiceBindingMetadata"
      credentials:
        type: "object"
        properties: {}
      syslog_drain_url:
        type: "string"
      route_service_url:
        type: "string"
      volume_mounts:
        type: "array"
        items:
          $ref: "#/definitions/ServiceBindingVolumeMount"
      endpoints:
        type: "array"
        items:
          $ref: "#/definitions/ServiceBindingEndpoint"
      parameters:
        type: "object"
        properties: {}
    example:
      metadata:
        expires_at: "expires_at"
        renew_before: "renew_before"
      route_service_url: "route_service_url"
      endpoints:
      - protocol: "tcp"
        host: "host"
        ports:
        - "ports"
        - "ports"
      - protocol: "tcp"
        host: "host"
        ports:
        - "ports"
        - "ports"
      credentials: "{}"
      syslog_drain_url: "syslog_drain_url"
      volume_mounts:
      - mode: "r"
        driver: "driver"
        device_type: "shared"
        device:
          volume_id: "volume_id"
          mount_config: "{}"
        container_dir: "container_dir"
      - mode: "r"
        driver: "driver"
        device_type: "shared"
        device:
          volume_id: "volume_id"
          mount_config: "{}"
        container_dir: "container_dir"
      parameters: "{}"
  ServiceBindingRequest:
    type: "object"
    required:
    - "plan_id"
    - "service_id"
    properties:
      context:
        $ref: "#/definitions/Context"
      service_id:
        type: "string"
      plan_id:
        type: "string"
      app_guid:
        type: "string"
        x-deprecated: true
      bind_resource:
        $ref: "#/definitions/ServiceBindingResourceObject"
      parameters:
        type: "object"
        properties: {}
      predecessor_binding_id:
        type: "string"
    example:
      app_guid: "app_guid"
      predecessor_binding_id: "predecessor_binding_id"
      service_id: "service_id"
      context: {}
      bind_resource:
        app_guid: "app_guid"
        route: "route"
      parameters: "{}"
      plan_id: "plan_id"
  ServiceBindingResourceObject:
    type: "object"
    properties:
      app_guid:
        type: "string"
      route:
        type: "string"
    example:
      app_guid: "app_guid"
      route: "route"
  ServiceBindingResponse:
    type: "object"
    properties:
      metadata:
        $ref: "#/definitions/ServiceBindingMetadata"
      credentials:
        type: "object"
        properties: {}
      syslog_drain_url:
        type: "string"
      route_service_url:
        type: "string"
      volume_mounts:
        type: "array"
        items:
          $ref: "#/definitions/ServiceBindingVolumeMount"
      endpoints:
        type: "array"
        items:
          $ref: "#/definitions/ServiceBindingEndpoint"
    example:
      metadata:
        expires_at: "expires_at"
        renew_before: "renew_before"
      route_service_url: "route_service_url"
      endpoints:
      - protocol: "tcp"
        host: "host"
        ports:
        - "ports"
        - "ports"
      - protocol: "tcp"
        host: "host"
        ports:
        - "ports"
        - "ports"
      credentials: "{}"
      syslog_drain_url: "syslog_drain_url"
      volume_mounts:
      - mode: "r"
        driver: "driver"
        device_type: "shared"
        device:
          volume_id: "volume_id"
          mount_config: "{}"
        container_dir: "container_dir"
      - mode: "r"
        driver: "driver"
        device_type: "shared"
        device:
          volume_id: "volume_id"
          mount_config: "{}"
        container_dir: "container_dir"
  ServiceBindingMetadata:
    type: "object"
    properties:
      expires_at:
        type: "string"
      renew_before:
        type: "string"
    example:
      expires_at: "expires_at"
      renew_before: "renew_before"
  ServiceBindingEndpoint:
    type: "object"
    required:
    - "host"
    - "ports"
    properties:
      host:
        type: "string"
      ports:
        type: "array"
        items:
          type: "string"
      protocol:
        type: "string"
        default: "tcp"
        enum:
        - "tcp"
        - "udp"
        - "all"
    example:
      protocol: "tcp"
      host: "host"
      ports:
      - "ports"
      - "ports"
  ServiceBindingVolumeMount:
    type: "object"
    required:
    - "container_dir"
    - "device"
    - "device_type"
    - "driver"
    - "mode"
    properties:
      driver:
        type: "string"
      container_dir:
        type: "string"
      mode:
        type: "string"
        enum:
        - "r"
        - "rw"
      device_type:
        type: "string"
        enum:
        - "shared"
      device:
        $ref: "#/definitions/ServiceBindingVolumeMountDevice"
    example:
      mode: "r"
      driver: "driver"
      device_type: "shared"
      device:
        volume_id: "volume_id"
        mount_config: "{}"
      container_dir: "container_dir"
  ServiceBindingVolumeMountDevice:
    type: "object"
    required:
    - "volume_id"
    properties:
      volume_id:
        type: "string"
      mount_config:
        type: "object"
        properties: {}
    example:
      volume_id: "volume_id"
      mount_config: "{}"
  ServiceInstanceMetadata:
    type: "object"
    properties:
      labels:
        type: "object"
        properties: {}
      attributes:
        type: "object"
        properties: {}
    example:
      attributes: "{}"
      labels: "{}"
  MaintenanceInfo:
    type: "object"
    properties:
      version:
        type: "string"
      description:
        type: "string"
    example:
      description: "description"
      version: "version"
  Context:
    type: "object"
    description: "See [Context Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#context-object)\
      \ for more details."
  Metadata:
    type: "object"
    description: "See [Service Metadata Conventions](https://github.com/openservicebrokerapi/servicebroker/blob/master/profile.md#service-metadata)\
      \ for more details."
  Object:
    type: "object"
  Error:
    type: "object"
    properties:
      error:
        type: "string"
      description:
        type: "string"
      instance_usable:
        type: "boolean"
      update_repeatable:
        type: "boolean"
parameters:
  APIVersion:
    name: "X_Broker_API_Version"
    in: "header"
    description: "version number of the Service Broker API that the Platform will\
      \ use"
    required: true
    type: "string"
  OriginatingIdentity:
    name: "X_Broker_API_Originating_Identity"
    in: "header"
    description: "identity of the user that initiated the request from the Platform"
    required: false
    type: "string"
  RequestIdentity:
    name: "X_Broker_API_Request_Identity"
    in: "header"
    description: "idenity of the request from the Platform"
    required: false
    type: "string"
  accepts_incomplete:
    name: "accepts_incomplete"
    in: "query"
    description: "asynchronous operations supported"
    required: false
    type: "boolean"
  service_id:
    name: "service_id"
    in: "query"
    description: "id of the service associated with the instance being deleted"
    required: true
    type: "string"
  plan_id:
    name: "plan_id"
    in: "query"
    description: "id of the plan associated with the instance being deleted"
    required: true
    type: "string"
responses:
  ErrorBadRequest:
    description: "Bad Request"
    schema:
      $ref: "#/definitions/Error"
  ErrorUnauthorized:
    description: "Unauthorized"
    schema:
      $ref: "#/definitions/Error"
  ErrorNotFound:
    description: "Not Found"
    schema:
      $ref: "#/definitions/Error"
  ErrorConflict:
    description: "Conflict"
    schema:
      $ref: "#/definitions/Error"
  ErrorGone:
    description: "Gone"
    schema:
      $ref: "#/definitions/Error"
  ErrorPreconditionFailed:
    description: "Precondition Failed"
    schema:
      $ref: "#/definitions/Error"
  ErrorUnprocessableEntity:
    description: "Unprocessable Entity"
    schema:
      $ref: "#/definitions/Error"
  ErrorUnexpected:
    description: "Unexpected"
    schema:
      $ref: "#/definitions/Error"
externalDocs:
  description: "The offical Open Service Broker API specification"
  url: "https://github.com/openservicebrokerapi/servicebroker/"
